// Light shaft post fx shader by Lord Kv
// http://quadropolis.us/node/4072

// Light shaft shader definition
lazyshader 4 "lightshaftshader2" [ @fsvs } ] [
	
	// Color convertion method from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
	vec3 hsv2rgb(vec3 c)
	{
    	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}
	
	// Parameter
	// x: sun's position x
	// y: sun's position y
	// z: max lightshaft samples
	// w: lightshaft sample reduction (1.0 = all pixels, 0.5 = every second pixel...)
	uniform vec4 params;
	
	@fsps
		// Screen resolution for distance calculations
		vec2 res = vec2(@scr_w, @scr_h);
		
		// Screen middle in pixels
		vec2 middle = vec2(params.x + (res.x * 0.5), params.y + (res.y * 0.5));
		
		// Vector towards the screen middle
		vec2 toMiddle = vec2(middle.x - gl_TexCoord[0].x, middle.y - gl_TexCoord[0].y);
		
		// Normal vector towards screen middle
		vec2 toMiddlenormal = normalize(toMiddle);
		
		// Distance towards screen middle in pixels
		float distpixel = sqrt(toMiddle.x * toMiddle.x + toMiddle.y * toMiddle.y);
		
		// Distance towards screen middle in ratio
		float dist = distpixel / (max(res.x, res.y));
		
		// Pixel's new color with lightshafts
		vec4 color2 = sample;
		
		// Help var to remove if in sunflare
		vec4 sample2 = sample;
		
		// Constants, change these to alter lightshaft's look
		float minfactor = 0.85;
		float size = 0.3;
		float suncenter = 0.1;
		float colorsize = 0.15;
		float visibility = 1.0;
		
		// GPUs dont like ifs... But in this case it's faster than running lightshafts for all pixels
		if(dist < size)
		{
			// Colored sun color
    		vec4 rainbow =  vec4(hsv2rgb(vec3(toMiddlenormal.x / 5.0 + 0.5, 1.0,1.0)), sample.w);
    		
			// For loop that generates lightshafts
			float multiadd = clamp((distpixel * params.w), 0.0, params.z);
			float multi = 0.01 + dist * 2.0;
			for(multi;multi<1.0;multi = multi + 1 / multiadd){
				vec4 color = texture2DRect(tex0, vec2(gl_TexCoord[0].x + toMiddle.x * multi, gl_TexCoord[0].y + toMiddle.y * multi));
				
				// Pixel brightness, if high enough pixel is counted as sky
				float factor = max(color.x, max(color.y, color.z));
				
				// This float is a much faster "if (factor > minfactor)"
				float replacedif = clamp((factor - minfactor) * 1000000.0, 0.0, 1.0);
				
				// Sun coloring
				vec4 colorrainbowed = mix(color, color * rainbow, clamp(dist * 2.0, 0.0, 1.0));
				color2 = mix(color2, colorrainbowed, clamp(2.0 / multiadd * replacedif, 0.0, 1.0));
			}
			
			// Sunflare
			float scale = (1.0 - (dist - suncenter) / (size - suncenter));
			// If removal
			float replacedif2 = 1.0 - clamp((dist - suncenter) * 1000000.0, 0.0, 1.0);
			sample2 = mix(sample, color2, clamp(visibility * scale * scale, 0.0, 1.0));
			sample2 = mix(sample2, mix(sample, color2, visibility), replacedif2);
		}
		gl_FragColor = sample2;
		
} ] []


//
// Cubescript
//

lightshaftloopstate = [0];
lsdetail = 0.5;
lsmaxsamples = 1000;
lstoggle = [
	if ($lightshaftloopstate) [lightshaftloopstate = [0]; sleep 100 [clearpostfx]] [
		if (< $arg2 1) [lsmaxsamples = 1000] [lsmaxsamples = $arg2]
		lightshaftloopstate = [1]
		if (>= $numargs 1) [
			if (<f $arg1 10) [
				echo "3Valid Light Shaft detail range is 10 .. 100!"
				lsdetail = 0.1;
				lightshaftloop
			] [
				if (>f $arg1 100) [
					echo "3Valid Light Shaft detail range is 10 .. 100!"
					lsdetail = 1.0;
					lightshaftloop
				] [lsdetail = (divf $arg1 100.0); lightshaftloop]
			]
		] [
			lightshaftloop
		]
	] 
]

lightshaftloop = [
	updatels
	// This var controls how often will this loop run.
	// By default it is set to 16 ms, which means script will run about 60 times per second.
	sleepmilis = [16];
	if (lightshaftloopstate) [sleep $sleepmilis [lightshaftloop]]
]



// Updates the shader with sun's position on screen

setlsdir = [
	diryaw = (getcamyaw)
	dirpitch = (getcampitch)
]

lssaturate = 1.0;
lslastskybox = ""
lslastyawsky = 0
lsenabled = 1
lsbloom = 0.2
lsminfactor = 0.85
diryaw = 0.0
dirpitch = 0.0
updatels = [
	lsskyboxfindsuccess = 0
	clearpostfx
	if (|| (!=s $lslastskybox $skybox) (!= $yawsky $lslastyawsky)) [
		looplist lssky $lsskydata [
			if (=s $skybox (at $lssky 0)) [
				lsskyboxfindsuccess = 1
				diryaw = (-f (at $lssky 1) $yawsky)
				lsenabled = (at $lssky 3)
				if (<f $diryaw 0) [
					diryaw = (+f $diryaw 360.0)
				]
				dirpitch = (at $lssky 2)
			]
		]
		if (= $lsskyboxfindsuccess 0) [
			echo "1[Lightshafts]  Skybox not found, using sunlight as sun's position (use 2/setlsdir  to set camera's position as sun)."
			if (|| (!=f $sunlightpitch 0.0) (!=f $sunlightyaw 0.0)) [
				diryaw = $sunlightyaw
				dirpitch = $sunlightpitch
			]
		]
	]
	lslastyawsky = $yawsky
	lslastskybox = $skybox
	sunVecX = (*f -1.0 (*f (sin $diryaw) (cos $dirpitch)))
	sunVecY = (*f (cos $diryaw) (cos $dirpitch))
	sunVecZ = (sin $dirpitch)
	
	yaw = (*f -1.0 $getcamyaw)
	pitch = (*f -1.0 $getcampitch)
	
	vecToSunX1 = (-f (*f (cos $yaw) $sunVecX) (*f (sin $yaw) $sunVecY))
	vecToSunY1 = (+f (*f (sin $yaw) $sunVecX) (*f (cos $yaw) $sunVecY))
	vecToSunZ1 = $sunVecZ
	
	vecToSunX = $vecToSunX1
	vecToSunY = (-f (*f (cos $pitch) $vecToSunY1) (*f (sin $pitch) $vecToSunZ1))
	vecToSunZ = (+f (*f (sin $pitch) $vecToSunY1) (*f (cos $pitch) $vecToSunZ1))
	
	vecToSunX = (*f -1.0 $vecToSunX)
	
	dist = (divf (divf $scr_w 2.0) (tan (divf ($fov) 2.0)))
	
	screenSunX = (*f (divf $vecToSunX $vecToSunY) $dist)
	screenSunY = (*f (divf $vecToSunZ $vecToSunY) $dist)
	
	if (&& (>f $vecToSunY 0.0) (lsenabled)) [
		addpostfx lightshaftshader2 0 0 0 $screenSunX $screenSunY $lsmaxsamples $lsdetail
	]
	lspostfx
]

// Sun's position for each skybox
// [skybox yaw pitch enable]
lsskydata = [
	["aftas/sky/orbe" 187.364 60.36367 1]
	["hazel/green" 21.90933 28.45456 1]
	["humus/meadow" 229.3637 30.9091 1]
	["ik2k/env/iklake" 304.2726 59.72729 1]
	["jon/prarie" 21.27257 23.18183 1]
	["mayhem/duomo" 43.45437 17.45455 1]
	["mayhem/eclipse" 206.9999 47.09092 1]
	["meister/uzze" 295.4544 38.45455 1]
	["penguins/arid" 247.9089 30.27272 1]
	["penguins/harmony" 144.1817 22.54544 1]
	["penguins/wrath" 238.7271 28.72726 1]
	["penguins/yonder" 240.8181 70.18183 1]
	["skyboxes/clearsky052" 136.091 39.45452 1]
	["skyboxes/darkness" 177.0001 51.54544 1]
	["skyboxes/morning" 240.5455 24.63634 1]
	["skyboxes/remus/sky01" 53.72734 42.27271 1]
	["skyboxes/turbulent" 143.8182 29.63633 1]
	["socksky/barren" 151.0909 61.45452 1]
	["socksky/desert" 104.6364 43.09089 1]
	["socksky/emerald" 58.09094 59.54545 1]
	["socksky/frozen" 325.0908 49.90908 1]
	["socksky/frozendusk" 160.9999 15.99998 1]
	["socksky/mars" 47.81813 50.81816 1]
	["socksky/valley" 140.2727 60.0909 1]
	["blindabuser/blindasky" 0 0 0]
	["blindabuser/blindasky2" 0 0 0]
	["darc/forge" 0 0 0]
	["dash/moon" 0 0 0]
	["socksky/nightball" 0 0 0]
	["socksky/grave" 0 0 0]
	["skyboxes/evilsky" 0 0 0]
	["shmutzwurst/london" 0 0 0]
	["ratboy/skyboxes/coward" 0 0 0]
	["staffy/staffy" 0 0 0]
]

lscsbe = [
	echo $lsenabled
]

